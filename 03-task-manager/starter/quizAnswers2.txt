1) In this lesson, you created a middleware function called asyncWrapper. Why?
 The asyncWrapper middleware function is created to handle asynchronous operations within route handler functions in an Express.js application. 
 Instead of repeating try-catch blocks in each route handler function to handle asynchronous errors, the asyncWrapper function provides a centralized mechanism to handle errors. 
 It wraps around the asynchronous function provided as an argument and catches any errors that occur during its execution.
2)  Completed code:
 const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    const error = new CustomAPIError(`No task with id: ${taskID}`, 404);
    return next(new CustomAPIError(`Task with ID ${taskID} not found`, 404));
    return next(error);
  }
  res.status(200).json({ task });
});